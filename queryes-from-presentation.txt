GraphQL Queryes from presentation
---------- Get customer by Id
{                                     
  customer(id: "2") {
    id
    name
    email
  }
}

---------- Invalid request
---------- Get customer by Id + Company
{
  customer(id: "2") {
    id
    name
    email
    company {
      id
      name
    }
  }
}

---------- Get customer by Id + Orders
{
  customer(id: "2") {
    id
    name
    orders {
      id
      status
    }
  }
}

---------- Get 2 customers by Id
query get2Cust {
   cust1: customer(id: "2") {
       id
       name
       email
   }
   cust2: customer(id: "3") {
       id
       name
       email
   }
}

---------- Remove duplication
query get2Cust {
   cust1: customer(id: "2") {
       ... frag1
   }
   cust2: customer(id: "3") {
       ... frag1
   }
}

fragment frag1 on Customer {
   id
   name
   email
}

---------- Add arguments
query get2Cust($arg1:String!, $arg2: String!) {
   cust2: customer(id: $arg1) {
       ... frag1
   }
   cust3: customer(id: $arg2) {
       ... frag1
   }
}

fragment frag1 on Customer {
   id
   name
   email
}

---------- Directive
query getCust($arg1:String!, $arg2:String!, $showEmail:Boolean!) {
  cust1: customer(id: $arg1) {
    ...frag1
  }
  cust2: customer(id: $arg2) {
    ...frag1
  }
}

fragment frag1 on Customer {
  id
  name
  email @include(if: $showEmail)
}

{
  "arg1": "3",
  "arg2": "2",
  "showEmail": false
}

---------- Interface
query getUsers {
  __typename
   users {
       ... on Admin {
           id
           name
           superAdmin
       }
       ... on Moderator {
           id
           name
           permissions
       }
   }
}

---------- Union
query searchSmth {
   search(input: "a") {
       __typename
       ... on Customer {
           name
       }
       ... on Admin {
           name
       }
       ... on Moderator {
           name
       }
   }
}

---------- Mutations
mutation {
  createCustomer(input: {
       name: "MyName" 
       email: "me@me.com"
       clientMutationId: "123"
    }) {
     customer {
        id
    }
    clientMutationId
  }
}

---------- Mutations + operation name
mutation crCust {
  createCustomer(input: {
       name: "MyName" 
       email: "me@me.com"
       clientMutationId: "123"
    }) {
     customer {
        id
    }
    clientMutationId
  }
}

---------- Variables
mutation crCust ($input: CreateCustInput) {
   createCustomer(input: $input) {
       customer {
           id
       }
       clientMutationId
   }
}

{
 "input": {
   "name": "MyName 2",
   "email": "me2@me.com",
   "clientMutationId": "123"
 }
}
---------- Introspection query
query IntrospectionQuery {
      __schema {
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          description
          locations
          args {
            ...InputValue
          }
        }
      }
    }
  
    fragment FullType on __Type {
      kind
      name
      description
      fields(includeDeprecated: true) {
        name
        description
        args {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        description
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }
  
    fragment InputValue on __InputValue {
      name
      description
      type { ...TypeRef }
      defaultValue
    }
  
    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }

----------
